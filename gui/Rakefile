require 'rake/clean'
require 'pathname'
require_relative 'lib/module_factory'

svg_build_dir = Pathname('_svg')
directory svg_build_dir

svg_install_dir = Pathname('../svg')
directory svg_install_dir

def inkscape(from:, to:)
  from = from.expand_path.to_s
  to = to.expand_path.to_s
  sh '/Applications/Inkscape.app/Contents/Resources/script', '--export-text-to-path', "--export-plain-svg=#{to}", from
end

def load_module(file)
  factory = ModuleFactory.new
  factory.instance_eval(File.read(file), file)
  factory.build
end

modules_dir = Pathname('modules')
module_files = FileList.new(modules_dir / '*.rb')

module_files.each do |module_file|
  file module_file
end

module_to_file = Hash[module_files.map { |file| [load_module(file), file] }]
modules = module_to_file.keys

modules.each do |mod|
  task mod => [module_to_file[mod]]
end

faceplate_file_to_module = Hash[modules.map { |m| [m.faceplate_file, m] }]
faceplate_files = faceplate_file_to_module.keys
faceplate_build_files = []
faceplate_install_files = []

faceplate_files.each do |faceplate_file|
  m = faceplate_file_to_module[faceplate_file]
  module_source_file = module_to_file[m]
  faceplate_build_file = svg_build_dir / faceplate_file.path
  faceplate_build_files << faceplate_build_file

  file faceplate_build_file => [svg_build_dir, module_source_file] do
    faceplate_file.write(svg_build_dir)
  end

  faceplate_install_file = svg_install_dir / faceplate_file.path
  faceplate_install_files << faceplate_install_file
  file faceplate_install_file => [svg_install_dir, faceplate_build_file] do
    inkscape(from: faceplate_build_file, to: faceplate_install_file)
  end
end

image_install_dir = Pathname('../images')
directory image_install_dir

image_build_dir = Pathname('_images')
directory image_build_dir

image_file_to_module = Hash[modules.map { |m| [m.image_file, m] }]
image_files = image_file_to_module.keys
image_build_files = []
image_install_files = []

image_files.each do |image_file|
  m = image_file_to_module[image_file]
  module_source_file = module_to_file[m]
  image_build_file = image_build_dir / image_file.path
  image_build_files << image_build_file

  file image_build_file => [image_build_dir, module_source_file] do
    image_file.write(image_build_dir)
  end

  image_install_file = image_install_dir / image_file.path
  image_install_files << image_install_file
  file image_install_file => [image_install_dir, image_build_file] do
    inkscape(from: image_build_file, to: image_install_file)
  end
end

control_to_module = Hash[modules.flat_map { |mod| mod.controls.map { |control| [control, mod] } }]
controls = control_to_module.keys

controls.each do |control|
  task control => [control_to_module[control]]
end

control_svg_to_control = Hash[
    controls.flat_map do |control|
      module_slug = control_to_module[control].slug
      control.svg_files(module_slug).map { |file| [file, control] }
    end
]
control_svgs = control_svg_to_control.keys

control_svgs.each do |svg|
  task svg => [control_svg_to_control[svg]]
end

control_build_path_to_svg = Hash[control_svgs.map { |svg| [svg_build_dir / svg.path, svg] }]
control_build_paths = control_build_path_to_svg.keys

control_build_paths.each do |control_build_path|
  dir = control_build_path.parent
  directory dir
  svg = control_build_path_to_svg[control_build_path]
  file control_build_path => [dir, svg] do
    svg.write(svg_build_dir)
  end
end

install_path_mapper = "%{^#{svg_build_dir},#{svg_install_dir}}p"
control_install_path_to_build_path = Hash[
    control_build_paths.map do |build_path|
      [Pathname(build_path.to_s.pathmap(install_path_mapper)), build_path]
    end
]
control_install_paths = control_install_path_to_build_path.keys

control_install_paths.each do |install_path|
  dir = Pathname(install_path).parent
  directory dir
  build_path = control_install_path_to_build_path[install_path]
  svg = control_build_path_to_svg[build_path]
  file install_path => [dir, build_path] do
    if svg.has_text
      inkscape(from: build_path, to: install_path)
    else
      cp build_path, install_path
    end
  end
end

desc 'Build SVG files (does not install)'
task build: control_build_paths + faceplate_build_files + image_build_files

desc 'Install SVG files'
task install: control_install_paths + faceplate_install_files + image_install_files

desc 'Remove and rebuild SVG files (does not install)'
task fresh: [:clean, :default]

desc 'Remove, rebuild, and reinstall SVG files'
task reinstall: [:clobber, :install]

task default: [:build]

CLEAN.include image_build_dir, svg_build_dir
CLOBBER.include image_install_dir, svg_install_dir
